import logging

from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType

from server import dp
from state import get_state

log_i = logging.info
log_w = logging.warning



@dp.message_handler(content_types=ContentType.PHOTO)
async def text_valid(message: types.Message):
    state = get_state(message.from_user.id)
    log_i("WORK ?")
    state.set_photo(message.photo[-1].file_id)
    if len(state.get_photo()) > 3:
        await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π  /present_task –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ")

@dp.message_handler(content_types=ContentType.TEXT)
async def text_valid(message: types.Message):
    state = get_state(message.from_user.id)
    log_i(f"{state.__class__} ---{state.state}")
    if "text" == state.state:
        state.set_text(message.text)
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è", request_location=True))
        markup.add("–í–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
        await message.reply("–í–µ–¥–∏—Ç–µ –≥–µ–æ–ø–∞–∑–∏—Ü–∏—é", reply_markup=markup)
    elif message.text == "–í–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        pass
    elif state.state == "geo":
        state.set_geo_link(message.text, 'text')
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.–ù–µ –±–æ–ª–µ–µ 3")
    # else:
    #     await message.answer("–ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_task")


@dp.message_handler(content_types=ContentType.LOCATION)
async def text_valid(message: types.Message):
    state = get_state(message.from_user.id)
    if state == 'geo':
        state.set_geo_link(message.location, "cord"),
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.–ù–µ –±–æ–ª–µ–µ 3\n –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π  /present_task")
